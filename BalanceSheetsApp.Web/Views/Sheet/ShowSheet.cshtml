@model BankViewModel
<table class="table table-bordered">
  <thead class="table-dark">
    <tr align="center">
        <th scope="col" rowspan="2" style="vertical-align: middle; text-align:center;">Б/сч</th>
        <th scope="col" colspan="2">Входящее сальдо</th>
        <th scope="col" colspan="2">Обороты</th>
        <th scope="col" colspan="2">Исходящее сальдо</th>
    </tr>
    <tr align="center">
  	    <th scope="col">Актив</th>
        <th scope="col">Пассив</th>
        <th scope="col">Дебет</th>
        <th scope="col">Кредит</th>
        <th scope="col">Актив</th>
        <th scope="col">Пассив</th>
    </tr>
  </thead>
  <tbody>
      @foreach (var fClass in Model.FinancialClasses)
        {
            <tr>
                <th class="table-active" colspan="7">
                    <div align="center">
                        @fClass.Name
                    </div>
                </th>
            </tr>
            int index = 0;
            decimal opBalActive = 0, opBalPassive = 0, debit = 0, credit = 0, clBalActive = 0, clBalPassive = 0;
            foreach (var account in fClass.Accounts)
            {
                opBalActive += account.OpeningBalance.Active;
                opBalPassive += account.OpeningBalance.Passive;
                debit += account.Debit;
                credit += account.Credit;
                clBalActive += account.ClosingBalance.Active;
                clBalPassive += account.ClosingBalance.Passive;

                <tr>
                    <td>@account.Number</td>
                    <td>@account.OpeningBalance.Active</td>
                    <td>@account.OpeningBalance.Passive</td>
                    <td>@account.Debit</td>
                    <td>@account.Credit</td>
                    <td>@account.ClosingBalance.Active</td>
                    <td>@account.ClosingBalance.Passive</td>
                </tr>

                if (fClass.Accounts.Last() == account || (account.Number / 100) != (fClass.Accounts.ElementAt(index + 1).Number / 100))
                {
                    <tr>
                        <th>@(account.Number / 100)</th>
                        <th>@opBalActive</th>
                        <th>@opBalPassive</th>
                        <th>@debit</th>
                        <th>@credit</th>
                        <th>@clBalActive</th>
                        <th>@clBalPassive</th>
                    </tr>

                    opBalActive = opBalPassive = debit = credit = clBalActive = clBalPassive = 0;
                }

                index++;
            }

            <tr>
                <th>По классу</th>
                <th>@fClass.Accounts.Sum(a => a.OpeningBalance.Active)</th>
                <th>@fClass.Accounts.Sum(a => a.OpeningBalance.Passive)</th>
                <th>@fClass.Accounts.Sum(a => a.Debit)</th>
                <th>@fClass.Accounts.Sum(a => a.Credit)</th>
                <th>@fClass.Accounts.Sum(a => a.ClosingBalance.Active)</th>
                <th>@fClass.Accounts.Sum(a => a.ClosingBalance.Passive)</th>
            </tr>
        }
  </tbody>
</table>